/*Mini Project: Laying of water pipelines using MST
 * UCE2021601, UCE2021602,UCE2021606,UCE2021622
 */

//import libraries
import java.util.Scanner;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.PriorityQueue;

//node class to initialize variables
class Node{
	int data;
	Node next;
	int weight;

	//parameterized constructor
	Node(int data,int weight) {
		this.weight=weight;
		this.data = data;
		next = null;
	}
}



//main class
public class miniproject {
	static int totalwt;
	static class Edge {
//class Edge to initialize edges of the graph with their source vertex, destination vertex and respective weight
		int source;
		int destination;
		int weight;

		//parameterized constructor
		public Edge(int source, int destination, int weight) {
			this.source = source;
			this.destination = destination;
			this.weight = weight;
		}
	}

	//Graph class to create and store graph input 
	static class Graph {
		int vertex;
		//creating an array list of type edge named "allEdges"
		ArrayList<Edge> allEdges = new ArrayList<>();

		Graph(int vertex) {//parameterized constructor
			this.vertex = vertex;
		}

		//function to add edge into the set of existing edges
		public void addEgde(int source, int destination, int weight) {
			Edge edge = new Edge(source, destination, weight);
			allEdges.add(edge); //add to total edges
		}

		//function to create, store and print MST using Kruskal algorithm 
		public void kruskalMST(){
			PriorityQueue<Edge> pq = new PriorityQueue<>(allEdges.size(), Comparator.comparingInt(o -> o.weight));

			//add all the edges to priority queue, //sort the edges on weights
			for (int i = 0; i <allEdges.size(); i++) {
				pq.add(allEdges.get(i));
			}

			//create a parent []
			int [] parent = new int[vertex];

			//makeset
			makeSet(parent);

			ArrayList<Edge> mst = new ArrayList<>();

			//process vertex â€“ 1 edges
			int index = 0;
			while(index<vertex-1){
				Edge edge = pq.remove();
				//check if adding this edge creates a cycle
				int x_set = find(parent, edge.source);
				int y_set = find(parent, edge.destination);

				if(x_set==y_set){
					//ignore, will create cycle
				}else {
					//add it to our final result
					mst.add(edge);
					index++;
					totalwt = totalwt + edge.weight;
					union(parent,x_set,y_set);
				}
			}
			//print MST
			System.out.println("Minimum Spanning Tree: ");
			printGraph(mst);
		}

		public void makeSet(int [] parent){
			//Make set- creating a new element with a parent pointer to itself.
			for (int i = 0; i <vertex ; i++) {
				parent[i] = i;
			}
		}

		public int find(int [] parent, int vertex){
			//chain of parent pointers from x upwards through the tree
			// until an element is reached whose parent is itself
			if(parent[vertex]!=vertex)
				return find(parent, parent[vertex]);;
				return vertex;
		}

		public void union(int [] parent, int x, int y){
			int x_set_parent = find(parent, x);
			int y_set_parent = find(parent, y);
			//make x as parent of y
			parent[y_set_parent] = x_set_parent;
		}

		public void printGraph(ArrayList<Edge> edgeList){
			System.out.println("Edge \tCost");
			for (int i = 0; i <edgeList.size() ; i++) {
				Edge edge = edgeList.get(i);
				System.out.println(edge.source + "-" + edge.destination + "\t" +edge.weight);
				System.out.println("Total cost = " + totalwt);
			}
		}
	}

	public static void main(String args[]) {
		Scanner s = new Scanner(System.in);
		System.out.println("Enter number of chowks: ");
		int vertex = s.nextInt();
		System.out.println("Enter number of roads");
		int edge = s.nextInt();
		int choice;
		do {
			
			System.out.println("Press 1 to use Kruskal's algorithm");
			System.out.println("Press 2 to exit");
			choice = s.nextInt();
			switch(choice) {

			case 1: Graph graph = new Graph(vertex);
			for(int i=0; i<edge; i++) {
				System.out.println("Enter 1st endpoint of road");
				int e1 = s.nextInt();
				System.out.println("Enter 2nd endpoint of road");
				int e2 = s.nextInt();
				System.out.println("Enter weight of road");
				int weight = s.nextInt();
				graph.addEgde(e1, e2, weight);
				System.out.println("Road added");
			}
			graph.kruskalMST();
			break; 

			case 2: System.exit(3);

			default: System.out.println("Enter valid choice");
			}
		}
		while(choice!=3);
	}
}
