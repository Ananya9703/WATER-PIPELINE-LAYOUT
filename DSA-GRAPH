/*Mini Project: Laying of water pipelines using MST
 * UCE2021601, UCE2021602,UCE2021606,UCE2021622
 */

//import libraries
import java.util.Scanner;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.PriorityQueue;

//node class to initialize variables
class Node{
	int data;
	Node next;
	int weight;

	//parameterized constructor
	Node(int data,int weight) {
		this.weight=weight;
		this.data = data;
		next = null;
	}
}

class PrimMST {
	Node[] head;
	int adjMat[][];
	int totalwt=0;

	int[][] createUsingAdjMat(Scanner s, int vertex, int edge) {
		adjMat = new int[vertex][vertex];
		for(int i=0; i<vertex; i++) {
			for(int j=0; j<vertex; j++) {
				adjMat[i][j]=0;
			}
		}
		for(int i=0; i<edge; i++) {
			System.out.println("Enter the first endpoint of road");
			int e1 = s.nextInt();
			System.out.println("Enter the next end point of road");
			int e2 = s.nextInt();
			System.out.println("Enter the cost of the road");
			int wt =s.nextInt();
			if(e1<vertex && e2<vertex) {
				adjMat[e1][e2] = wt;
				adjMat[e2][e1] = wt; //undirected graph
			}
			else {
				System.out.println("Index out of bounds");
			}
		}
		return adjMat;
	}

	int[][] display(int vertex, int edge){
		System.out.println("The matrix is ");
		for(int i=0; i<vertex; i++) {
			for(int j=0; j<vertex; j++) {
				System.out.print(adjMat[i][j]+ "\t");
			}
			System.out.println(" ");
		}
		return adjMat;
	}

	//number of vertices being used in graph (as a count)

	//Function to find vertex with minimum key value, from set of
	//vertices not yet included in MST
	int findMinKey(int key[], Boolean setofMST[], int vertex) {
		//initialize min value and its index
		int min_index=0; //*-1 to 0
		int min_weight=Integer.MAX_VALUE;

		//iterate over all vertices to find minimum key-value vertex
		for(int i=0;i<vertex;i++) {
			if(setofMST[i]==false && key[i]<min_weight) {
				min_weight=key[i];
				min_index=i;
			}
		}
		return min_index;
	}

	//Function to construct and print MST for a graph 
	//represented using adjacency matrix
	void primMST(int vertex, int edge) {
		//Array to store constructed MST
		int parent[]=new int[vertex];
		//Key values used to pick edge with min weight
		int key[]=new int[vertex];
		//represent set of vertices included in MST
		Boolean setofMST[]=new Boolean[vertex];
		//Initialize all keys as infinite
		for(int i=0;i<vertex;i++) {
			key[i]=Integer.MAX_VALUE;
			setofMST[i]=false;
		}

		//Always include first vertex in MST
		key[0]=0;//Make key 0 so that this vertex is the first vertex
		parent[0]=-1; //*First node is root of MST *-1 to 0

		//The MST will have "countOfVert" no. of vertices
		for(int count=0;count<vertex-1;count++) { //*vertex to edge
			//Pick the min key vertex from set of vertices not yet included
			int u = findMinKey(key, setofMST, vertex); //u=returned min_index from findMinKey function

			//Add the picked vertex to MST set
			setofMST[u]=true;

			//update key value and parent index of the 
			//adjacent vertices of the picked vertex.
			//Considering only those vertices that are
			//not yet considered in MST
			for(int i=0;i<vertex;i++) {

				//adjmat[u][vertex] is non zero only for adjacent vertices of u. 
				//setofMST[vertex] is false for vertices not yet included in MST.
				//Update the key only if adjmat[u][vertex] is smaller than key[v]
				if(adjMat[u][i]!=0 && setofMST[i]==false && adjMat[u][i]<key[i]) {
					parent[i]=u;
					key[i]=adjMat[u][i];
				}
			}
		}
		printMST(parent, vertex);
	}
	
	//Function to print the constructed MST stored in parent[]
	void printMST(int parent[], int vertex) {
		System.out.println("Edge \tCost");
		for(int i=1;i<vertex;i++) {
			System.out.println(parent[i]+"-"+i+"\t"+adjMat[i][parent[i]]);
			totalwt = totalwt + adjMat[i][parent[i]];
		}
		System.out.println("Total Cost = " + totalwt);
	}

}

//main class
public class FinalCode_MiniProject {
	static int totalwt;
	static class Edge {
//class Edge to initialize edges of the graph with their source vertex, destination vertex and respective weight
		int source;
		int destination;
		int weight;

		//parameterized constructor
		public Edge(int source, int destination, int weight) {
			this.source = source;
			this.destination = destination;
			this.weight = weight;
		}
	}

	//Graph class to create and store graph input 
	static class Graph {
		int vertex;
		//creating an array list of type edge named "allEdges"
		ArrayList<Edge> allEdges = new ArrayList<>();

		Graph(int vertex) {//parameterized constructor
			this.vertex = vertex;
		}

		//function to add edge into the set of existing edges
		public void addEgde(int source, int destination, int weight) {
			Edge edge = new Edge(source, destination, weight);
			allEdges.add(edge); //add to total edges
		}

		//function to create, store and print MST using Kruskal algorithm 
		public void kruskalMST(){
			PriorityQueue<Edge> pq = new PriorityQueue<>(allEdges.size(), Comparator.comparingInt(o -> o.weight));

			//add all the edges to priority queue, //sort the edges on weights
			for (int i = 0; i <allEdges.size(); i++) {
				pq.add(allEdges.get(i));
			}

			//create a parent []
			int [] parent = new int[vertex];

			//makeset
			makeSet(parent);

			ArrayList<Edge> mst = new ArrayList<>();

			//process vertex â€“ 1 edges
			int index = 0;
			while(index<vertex-1){
				Edge edge = pq.remove();
				//check if adding this edge creates a cycle
				int x_set = find(parent, edge.source);
				int y_set = find(parent, edge.destination);

				if(x_set==y_set){
					//ignore, will create cycle
				}else {
					//add it to our final result
					mst.add(edge);
					index++;
					totalwt = totalwt + edge.weight;
					union(parent,x_set,y_set);
				}
			}
			//print MST
			System.out.println("Minimum Spanning Tree: ");
			printGraph(mst);
		}

		public void makeSet(int [] parent){
			//Make set- creating a new element with a parent pointer to itself.
			for (int i = 0; i <vertex ; i++) {
				parent[i] = i;
			}
		}

		public int find(int [] parent, int vertex){
			//chain of parent pointers from x upwards through the tree
			// until an element is reached whose parent is itself
			if(parent[vertex]!=vertex)
				return find(parent, parent[vertex]);;
				return vertex;
		}

		public void union(int [] parent, int x, int y){
			int x_set_parent = find(parent, x);
			int y_set_parent = find(parent, y);
			//make x as parent of y
			parent[y_set_parent] = x_set_parent;
		}

		public void printGraph(ArrayList<Edge> edgeList){
			System.out.println("Edge \tCost");
			for (int i = 0; i <edgeList.size() ; i++) {
				Edge edge = edgeList.get(i);
				System.out.println(edge.source + "-" + edge.destination + "\t" +edge.weight);
				System.out.println("Total cost = " + totalwt);
			}
		}
	}

	public static void main(String args[]) {
		Scanner s = new Scanner(System.in);
		PrimMST table = new PrimMST();
		System.out.println("Enter number of chowks: ");
		int vertex = s.nextInt();
		System.out.println("Enter number of roads");
		int edge = s.nextInt();
		int choice;
		do {
			System.out.println("Press 1 to use Prim's algorithm");
			System.out.println("Press 2 to use Kruskal's algorithm");
			System.out.println("Press 3 to exit");
			choice = s.nextInt();
			switch(choice) {
			
			case 1: //int adjMat[][] = new int[vertex][vertex];
				table.createUsingAdjMat(s, vertex, edge);
			table.display(vertex, edge);
			table.primMST(vertex, edge);
			break;

			case 2: Graph graph = new Graph(vertex);
			for(int i=0; i<edge; i++) {
				System.out.println("Enter 1st endpoint of road");
				int e1 = s.nextInt();
				System.out.println("Enter 2nd endpoint of road");
				int e2 = s.nextInt();
				System.out.println("Enter weight of road");
				int weight = s.nextInt();
				graph.addEgde(e1, e2, weight);
				System.out.println("Road added");
			}
			graph.kruskalMST();
			break; 

			case 3: System.exit(3);

			default: System.out.println("Enter valid choice");
			}
		}
		while(choice!=3);
	}
}
